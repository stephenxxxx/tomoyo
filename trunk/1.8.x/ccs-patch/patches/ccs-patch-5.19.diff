This is TOMOYO Linux patch for kernel 5.19-rc1.

Source code for this patch is https://git.kernel.org/torvalds/t/linux-5.19-rc1.tar.gz
---
 fs/exec.c                 |    2 -
 fs/open.c                 |    2 +
 fs/proc/version.c         |    7 +++++
 include/linux/sched.h     |    5 +++
 include/linux/security.h  |   60 +++++++++++++++++++++++++---------------------
 include/net/ip.h          |    4 +++
 init/init_task.c          |    4 +++
 kernel/kexec.c            |    4 ++-
 kernel/module.c           |    5 +++
 kernel/ptrace.c           |   10 +++++++
 kernel/reboot.c           |    3 ++
 kernel/sched/core.c       |    2 +
 kernel/signal.c           |   25 +++++++++++++++++++
 kernel/sys.c              |    8 ++++++
 kernel/time/timekeeping.c |    8 ++++++
 net/ipv4/raw.c            |    4 +++
 net/ipv4/udp.c            |    2 +
 net/ipv6/raw.c            |    4 +++
 net/ipv6/udp.c            |    2 +
 net/socket.c              |    4 +++
 net/unix/af_unix.c        |    5 +++
 security/Kconfig          |    2 +
 security/Makefile         |    3 ++
 security/security.c       |    5 +++
 24 files changed, 150 insertions(+), 30 deletions(-)

--- linux.orig/fs/exec.c
+++ linux/fs/exec.c
@@ -1833,7 +1833,7 @@ static int bprm_execve(struct linux_binp
 	if (retval)
 		goto out;
 
-	retval = exec_binprm(bprm);
+	retval = ccs_exec_binprm(bprm);
 	if (retval < 0)
 		goto out;
 
--- linux.orig/fs/open.c
+++ linux/fs/open.c
@@ -1374,6 +1374,8 @@ SYSCALL_DEFINE3(close_range, unsigned in
  */
 SYSCALL_DEFINE0(vhangup)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup_self();
 		return 0;
--- linux.orig/fs/proc/version.c
+++ linux/fs/proc/version.c
@@ -21,3 +21,10 @@ static int __init proc_version_init(void
 	return 0;
 }
 fs_initcall(proc_version_init);
+
+static int __init ccs_show_version(void)
+{
+	printk(KERN_INFO "Hook version: 5.18+ 2022/05/25\n");
+	return 0;
+}
+fs_initcall(ccs_show_version);
--- linux.orig/include/linux/sched.h
+++ linux/include/linux/sched.h
@@ -44,6 +44,7 @@ struct blk_plug;
 struct bpf_local_storage;
 struct bpf_run_ctx;
 struct capture_control;
+struct ccs_domain_info;
 struct cfs_rq;
 struct fs_struct;
 struct futex_pi_state;
@@ -1379,6 +1380,10 @@ struct task_struct {
 	/* Pause tracing: */
 	atomic_t			tracing_graph_pause;
 #endif
+#if defined(CONFIG_CCSECURITY) && !defined(CONFIG_CCSECURITY_USE_EXTERNAL_TASK_SECURITY)
+	struct ccs_domain_info		*ccs_domain_info;
+	u32				ccs_flags;
+#endif
 
 #ifdef CONFIG_TRACING
 	/* State flags for use by tracers: */
--- linux.orig/include/linux/security.h
+++ linux/include/linux/security.h
@@ -59,6 +59,7 @@ struct fs_parameter;
 enum fs_value_type;
 struct watch;
 struct watch_notification;
+#include <linux/ccsecurity.h>
 
 /* Default (no) options for the capable function */
 #define CAP_OPT_NONE 0x0
@@ -588,7 +589,10 @@ static inline int security_syslog(int ty
 static inline int security_settime64(const struct timespec64 *ts,
 				     const struct timezone *tz)
 {
-	return cap_settime(ts, tz);
+	int error = cap_settime(ts, tz);
+	if (!error)
+		error = ccs_settime(ts, tz);
+	return error;
 }
 
 static inline int security_vm_enough_memory_mm(struct mm_struct *mm, long pages)
@@ -681,18 +685,18 @@ static inline int security_sb_mount(cons
 				    const char *type, unsigned long flags,
 				    void *data)
 {
-	return 0;
+	return ccs_sb_mount(dev_name, path, type, flags, data);
 }
 
 static inline int security_sb_umount(struct vfsmount *mnt, int flags)
 {
-	return 0;
+	return ccs_sb_umount(mnt, flags);
 }
 
 static inline int security_sb_pivotroot(const struct path *old_path,
 					const struct path *new_path)
 {
-	return 0;
+	return ccs_sb_pivotroot(old_path, new_path);
 }
 
 static inline int security_sb_set_mnt_opts(struct super_block *sb,
@@ -714,7 +718,7 @@ static inline int security_sb_clone_mnt_
 static inline int security_move_mount(const struct path *from_path,
 				      const struct path *to_path)
 {
-	return 0;
+	return ccs_move_mount_permission(from_path, to_path);
 }
 
 static inline int security_path_notify(const struct path *path, u64 mask,
@@ -856,7 +860,7 @@ static inline int security_inode_setattr
 
 static inline int security_inode_getattr(const struct path *path)
 {
-	return 0;
+	return ccs_inode_getattr(path);
 }
 
 static inline int security_inode_setxattr(struct user_namespace *mnt_userns,
@@ -954,7 +958,7 @@ static inline void security_file_free(st
 static inline int security_file_ioctl(struct file *file, unsigned int cmd,
 				      unsigned long arg)
 {
-	return 0;
+	return ccs_file_ioctl(file, cmd, arg);
 }
 
 static inline int security_mmap_file(struct file *file, unsigned long prot,
@@ -983,7 +987,7 @@ static inline int security_file_lock(str
 static inline int security_file_fcntl(struct file *file, unsigned int cmd,
 				      unsigned long arg)
 {
-	return 0;
+	return ccs_file_fcntl(file, cmd, arg);
 }
 
 static inline void security_file_set_fowner(struct file *file)
@@ -1005,17 +1009,19 @@ static inline int security_file_receive(
 
 static inline int security_file_open(struct file *file)
 {
-	return 0;
+	return ccs_file_open(file);
 }
 
 static inline int security_task_alloc(struct task_struct *task,
 				      unsigned long clone_flags)
 {
-	return 0;
+	return ccs_alloc_task_security(task);
 }
 
 static inline void security_task_free(struct task_struct *task)
-{ }
+{
+	ccs_free_task_security(task);
+}
 
 static inline int security_cred_alloc_blank(struct cred *cred, gfp_t gfp)
 {
@@ -1444,7 +1450,7 @@ static inline int security_unix_may_send
 static inline int security_socket_create(int family, int type,
 					 int protocol, int kern)
 {
-	return 0;
+	return ccs_socket_create(family, type, protocol, kern);
 }
 
 static inline int security_socket_post_create(struct socket *sock,
@@ -1465,19 +1471,19 @@ static inline int security_socket_bind(s
 				       struct sockaddr *address,
 				       int addrlen)
 {
-	return 0;
+	return ccs_socket_bind(sock, address, addrlen);
 }
 
 static inline int security_socket_connect(struct socket *sock,
 					  struct sockaddr *address,
 					  int addrlen)
 {
-	return 0;
+	return ccs_socket_connect(sock, address, addrlen);
 }
 
 static inline int security_socket_listen(struct socket *sock, int backlog)
 {
-	return 0;
+	return ccs_socket_listen(sock, backlog);
 }
 
 static inline int security_socket_accept(struct socket *sock,
@@ -1489,7 +1495,7 @@ static inline int security_socket_accept
 static inline int security_socket_sendmsg(struct socket *sock,
 					  struct msghdr *msg, int size)
 {
-	return 0;
+	return ccs_socket_sendmsg(sock, msg, size);
 }
 
 static inline int security_socket_recvmsg(struct socket *sock,
@@ -1786,42 +1792,42 @@ int security_path_chroot(const struct pa
 #else	/* CONFIG_SECURITY_PATH */
 static inline int security_path_unlink(const struct path *dir, struct dentry *dentry)
 {
-	return 0;
+	return ccs_path_unlink(dir, dentry);
 }
 
 static inline int security_path_mkdir(const struct path *dir, struct dentry *dentry,
 				      umode_t mode)
 {
-	return 0;
+	return ccs_path_mkdir(dir, dentry, mode);
 }
 
 static inline int security_path_rmdir(const struct path *dir, struct dentry *dentry)
 {
-	return 0;
+	return ccs_path_rmdir(dir, dentry);
 }
 
 static inline int security_path_mknod(const struct path *dir, struct dentry *dentry,
 				      umode_t mode, unsigned int dev)
 {
-	return 0;
+	return ccs_path_mknod(dir, dentry, mode, dev);
 }
 
 static inline int security_path_truncate(const struct path *path)
 {
-	return 0;
+	return ccs_path_truncate(path);
 }
 
 static inline int security_path_symlink(const struct path *dir, struct dentry *dentry,
 					const char *old_name)
 {
-	return 0;
+	return ccs_path_symlink(dir, dentry, old_name);
 }
 
 static inline int security_path_link(struct dentry *old_dentry,
 				     const struct path *new_dir,
 				     struct dentry *new_dentry)
 {
-	return 0;
+	return ccs_path_link(old_dentry, new_dir, new_dentry);
 }
 
 static inline int security_path_rename(const struct path *old_dir,
@@ -1830,22 +1836,22 @@ static inline int security_path_rename(c
 				       struct dentry *new_dentry,
 				       unsigned int flags)
 {
-	return 0;
+	return ccs_path_rename(old_dir, old_dentry, new_dir, new_dentry, flags);
 }
 
 static inline int security_path_chmod(const struct path *path, umode_t mode)
 {
-	return 0;
+	return ccs_path_chmod(path, mode);
 }
 
 static inline int security_path_chown(const struct path *path, kuid_t uid, kgid_t gid)
 {
-	return 0;
+	return ccs_path_chown(path, uid, gid);
 }
 
 static inline int security_path_chroot(const struct path *path)
 {
-	return 0;
+	return ccs_path_chroot(path);
 }
 #endif	/* CONFIG_SECURITY_PATH */
 
--- linux.orig/include/net/ip.h
+++ linux/include/net/ip.h
@@ -345,6 +345,8 @@ void inet_get_local_port_range(struct ne
 #ifdef CONFIG_SYSCTL
 static inline bool inet_is_local_reserved_port(struct net *net, unsigned short port)
 {
+	if (ccs_lport_reserved(port))
+		return true;
 	if (!net->ipv4.sysctl_local_reserved_ports)
 		return false;
 	return test_bit(port, net->ipv4.sysctl_local_reserved_ports);
@@ -363,6 +365,8 @@ static inline bool inet_port_requires_bi
 #else
 static inline bool inet_is_local_reserved_port(struct net *net, unsigned short port)
 {
+	if (ccs_lport_reserved(port))
+		return true;
 	return false;
 }
 
--- linux.orig/init/init_task.c
+++ linux/init/init_task.c
@@ -209,6 +209,10 @@ struct task_struct init_task
 #ifdef CONFIG_SECCOMP_FILTER
 	.seccomp	= { .filter_count = ATOMIC_INIT(0) },
 #endif
+#if defined(CONFIG_CCSECURITY) && !defined(CONFIG_CCSECURITY_USE_EXTERNAL_TASK_SECURITY)
+	.ccs_domain_info = NULL,
+	.ccs_flags      = 0,
+#endif
 };
 EXPORT_SYMBOL(init_task);
 
--- linux.orig/kernel/kexec.c
+++ linux/kernel/kexec.c
@@ -16,7 +16,7 @@
 #include <linux/syscalls.h>
 #include <linux/vmalloc.h>
 #include <linux/slab.h>
-
+#include <linux/ccsecurity.h>
 #include "kexec_internal.h"
 
 static int kimage_alloc_init(struct kimage **rimage, unsigned long entry,
@@ -198,6 +198,8 @@ static inline int kexec_load_check(unsig
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT) || kexec_load_disabled)
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	/* Permit LSMs and IMA to fail the kexec */
 	result = security_kernel_load_data(LOADING_KEXEC_IMAGE, false);
--- linux.orig/kernel/module.c
+++ linux/kernel/module.c
@@ -59,6 +59,7 @@
 #include <linux/audit.h>
 #include <uapi/linux/module.h>
 #include "module-internal.h"
+#include <linux/ccsecurity.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/module.h>
@@ -918,6 +919,8 @@ SYSCALL_DEFINE2(delete_module, const cha
 
 	if (!capable(CAP_SYS_MODULE) || modules_disabled)
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -3822,6 +3825,8 @@ static int may_init_module(void)
 {
 	if (!capable(CAP_SYS_MODULE) || modules_disabled)
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	return 0;
 }
--- linux.orig/kernel/ptrace.c
+++ linux/kernel/ptrace.c
@@ -1294,6 +1294,11 @@ SYSCALL_DEFINE4(ptrace, long, request, l
 {
 	struct task_struct *child;
 	long ret;
+	{
+		const int rc = ccs_ptrace_permission(request, pid);
+		if (rc)
+			return rc;
+	}
 
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
@@ -1441,6 +1446,11 @@ COMPAT_SYSCALL_DEFINE4(ptrace, compat_lo
 {
 	struct task_struct *child;
 	long ret;
+	{
+		const int rc = ccs_ptrace_permission(request, pid);
+		if (rc)
+			return rc;
+	}
 
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
--- linux.orig/kernel/reboot.c
+++ linux/kernel/reboot.c
@@ -18,6 +18,7 @@
 #include <linux/syscalls.h>
 #include <linux/syscore_ops.h>
 #include <linux/uaccess.h>
+#include <linux/ccsecurity.h>
 
 /*
  * this indicates whether you can reboot with ctrl-alt-del: the default is yes
@@ -327,6 +328,8 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 			magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/*
 	 * If pid namespaces are enabled and the current task is in a child
--- linux.orig/kernel/sched/core.c
+++ linux/kernel/sched/core.c
@@ -6956,6 +6956,8 @@ int can_nice(const struct task_struct *p
 SYSCALL_DEFINE1(nice, int, increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux.orig/kernel/signal.c
+++ linux/kernel/signal.c
@@ -3788,6 +3788,8 @@ static inline void prepare_kill_siginfo(
 SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)
 {
 	struct kernel_siginfo info;
+	if (ccs_kill_permission(pid, sig))
+		return -EPERM;
 
 	prepare_kill_siginfo(sig, &info);
 
@@ -3887,6 +3889,21 @@ SYSCALL_DEFINE4(pidfd_send_signal, int,
 	if (!access_pidfd_pidns(pid))
 		goto err;
 
+	{
+		struct task_struct *task;
+		int id = 0;
+
+		rcu_read_lock();
+		task = pid_task(pid, PIDTYPE_PID);
+		if (task)
+			id = task_pid_vnr(task);
+		rcu_read_unlock();
+		if (task && ccs_kill_permission(id, sig)) {
+			ret = -EPERM;
+			goto err;
+		}
+	}
+
 	if (info) {
 		ret = copy_siginfo_from_user_any(&kinfo, info);
 		if (unlikely(ret))
@@ -3971,6 +3988,8 @@ SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (ccs_tgkill_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -3987,6 +4006,8 @@ SYSCALL_DEFINE2(tkill, pid_t, pid, int,
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (ccs_tkill_permission(pid, sig))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
@@ -3999,6 +4020,8 @@ static int do_rt_sigqueueinfo(pid_t pid,
 	if ((info->si_code >= 0 || info->si_code == SI_TKILL) &&
 	    (task_pid_vnr(current) != pid))
 		return -EPERM;
+	if (ccs_sigqueue_permission(pid, sig))
+		return -EPERM;
 
 	/* POSIX.1b doesn't mention process groups.  */
 	return kill_proc_info(sig, info, pid);
@@ -4046,6 +4069,8 @@ static int do_rt_tgsigqueueinfo(pid_t tg
 	if ((info->si_code >= 0 || info->si_code == SI_TKILL) &&
 	    (task_pid_vnr(current) != pid))
 		return -EPERM;
+	if (ccs_tgsigqueue_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_send_specific(tgid, pid, sig, info);
 }
--- linux.orig/kernel/sys.c
+++ linux/kernel/sys.c
@@ -218,6 +218,10 @@ SYSCALL_DEFINE3(setpriority, int, which,
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -1362,6 +1366,8 @@ SYSCALL_DEFINE2(sethostname, char __user
 
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
 		struct new_utsname *u;
@@ -1414,6 +1420,8 @@ SYSCALL_DEFINE2(setdomainname, char __us
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
--- linux.orig/kernel/time/timekeeping.c
+++ linux/kernel/time/timekeeping.c
@@ -23,6 +23,7 @@
 #include <linux/pvclock_gtod.h>
 #include <linux/compiler.h>
 #include <linux/audit.h>
+#include <linux/ccsecurity.h>
 
 #include "tick-internal.h"
 #include "ntp_internal.h"
@@ -2345,10 +2346,15 @@ static int timekeeping_validate_timex(co
 		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
 		    !capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
+		    !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 	} else {
 		/* In order to modify anything, you gotta be super-user! */
 		if (txc->modes && !capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 		/*
 		 * if the quartz is off by more than 10% then
 		 * something is VERY wrong!
@@ -2363,6 +2369,8 @@ static int timekeeping_validate_timex(co
 		/* In order to inject time, you gotta be super-user! */
 		if (!capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (!ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 
 		/*
 		 * Validate if a timespec/timeval used to inject a time
--- linux.orig/net/ipv4/raw.c
+++ linux/net/ipv4/raw.c
@@ -772,6 +772,10 @@ static int raw_recvmsg(struct sock *sk,
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb, flags)) {
+		err = -EAGAIN; /* Hope less harmful than -EPERM. */
+		goto out;
+	}
 
 	copied = skb->len;
 	if (len < copied) {
--- linux.orig/net/ipv4/udp.c
+++ linux/net/ipv4/udp.c
@@ -1862,6 +1862,8 @@ try_again:
 	skb = __skb_recv_udp(sk, flags, noblock, &off, &err);
 	if (!skb)
 		return err;
+	if (ccs_socket_post_recvmsg_permission(sk, skb, flags))
+		return -EAGAIN; /* Hope less harmful than -EPERM. */
 
 	ulen = udp_skb_len(skb);
 	copied = len;
--- linux.orig/net/ipv6/raw.c
+++ linux/net/ipv6/raw.c
@@ -480,6 +480,10 @@ static int rawv6_recvmsg(struct sock *sk
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb, flags)) {
+		err = -EAGAIN; /* Hope less harmful than -EPERM. */
+		goto out;
+	}
 
 	copied = skb->len;
 	if (copied > len) {
--- linux.orig/net/ipv6/udp.c
+++ linux/net/ipv6/udp.c
@@ -345,6 +345,8 @@ try_again:
 	skb = __skb_recv_udp(sk, flags, noblock, &off, &err);
 	if (!skb)
 		return err;
+	if (ccs_socket_post_recvmsg_permission(sk, skb, flags))
+		return -EAGAIN; /* Hope less harmful than -EPERM. */
 
 	ulen = udp6_skb_len(skb);
 	copied = len;
--- linux.orig/net/socket.c
+++ linux/net/socket.c
@@ -1811,6 +1811,10 @@ struct file *do_accept(struct file *file
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		err = -EAGAIN; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
 	if (upeer_sockaddr) {
 		len = newsock->ops->getname(newsock,
 					(struct sockaddr *)&address, 2);
--- linux.orig/net/unix/af_unix.c
+++ linux/net/unix/af_unix.c
@@ -2417,6 +2417,10 @@ int __unix_dgram_recvmsg(struct sock *sk
 						EPOLLOUT | EPOLLWRNORM |
 						EPOLLWRBAND);
 
+	if (ccs_socket_post_recvmsg_permission(sk, skb, flags)) {
+		err = -EAGAIN; /* Hope less harmful than -EPERM. */
+		goto out_unlock;
+	}
 	if (msg->msg_name)
 		unix_copy_addr(msg, skb->sk);
 
@@ -2467,6 +2471,7 @@ int __unix_dgram_recvmsg(struct sock *sk
 
 out_free:
 	skb_free_datagram(sk, skb);
+out_unlock:
 	mutex_unlock(&u->iolock);
 out:
 	return err;
--- linux.orig/security/Kconfig
+++ linux/security/Kconfig
@@ -271,5 +271,7 @@ config LSM
 
 source "security/Kconfig.hardening"
 
+source "security/ccsecurity/Kconfig"
+
 endmenu
 
--- linux.orig/security/Makefile
+++ linux/security/Makefile
@@ -27,3 +27,6 @@ obj-$(CONFIG_SECURITY_LANDLOCK)		+= land
 
 # Object integrity file lists
 obj-$(CONFIG_INTEGRITY)			+= integrity/
+
+subdir-$(CONFIG_CCSECURITY)		+= ccsecurity
+obj-$(CONFIG_CCSECURITY)		+= ccsecurity/
--- linux.orig/security/security.c
+++ linux/security/security.c
@@ -1655,7 +1655,9 @@ int security_task_alloc(struct task_stru
 
 	if (rc)
 		return rc;
-	rc = call_int_hook(task_alloc, 0, task, clone_flags);
+	rc = ccs_alloc_task_security(task);
+	if (likely(!rc))
+		rc = call_int_hook(task_alloc, 0, task, clone_flags);
 	if (unlikely(rc))
 		security_task_free(task);
 	return rc;
@@ -1664,6 +1666,7 @@ int security_task_alloc(struct task_stru
 void security_task_free(struct task_struct *task)
 {
 	call_void_hook(task_free, task);
+	ccs_free_task_security(task);
 
 	kfree(task->security);
 	task->security = NULL;
